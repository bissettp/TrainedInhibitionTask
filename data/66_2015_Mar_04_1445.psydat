ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Users/patrickbissett/OneDrive/Poldrack/TrainedInhibition/PsychoPy/data/66_2015_Mar_04_1445
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'LearningTask'
p11
sS'dataNames'
p12
(lp13
S'ok1.keys'
p14
aS'ok1.rt'
p15
asS'autoLog'
p16
I01
sS'extraInfo'
p17
(dp18
S'expName'
p19
g11
sS'gender (m/f)'
p20
Vm
sS'age'
p21
V30
p22
sS'frameRate'
p23
cnumpy.core.multiarray
scalar
p24
(cnumpy
dtype
p25
(S'f8'
I0
I1
tRp26
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x84j\xef\xb1\x00\x08N@'
tRp27
sS'session'
p28
I3
sS'date'
p29
V2015_Mar_04_1445
p30
sS'participant'
p31
V66
p32
ssS'loopsUnfinished'
p33
(lp34
sS'saveWideText'
p35
I01
sS'thisEntry'
p36
(dp37
sS'version'
p38
S''
sS'_paramNamesSoFar'
p39
(lp40
VColor
p41
aVShape
p42
aVStopOrGo
p43
aVAmount
p44
asS'entries'
p45
(lp46
(dp47
g28
I3
sS'ColorLoop.thisTrialN'
p48
I0
sS'ColorLoop.thisRepN'
p49
I0
sg41
Vorange
p50
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p51
g24
(g25
(S'i8'
I0
I1
tRp52
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp53
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p54
I0
sa(dp55
g28
I3
sS'ColorLoop.thisTrialN'
p56
I1
sS'ColorLoop.thisRepN'
p57
I0
sg41
Vwhite
p58
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p59
g24
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp60
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p61
I1
sa(dp62
g28
I3
sS'ColorLoop.thisTrialN'
p63
I2
sS'ColorLoop.thisRepN'
p64
I0
sg41
Vyellow
p65
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p66
g24
(g52
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp67
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p68
I2
sa(dp69
g28
I3
sS'ColorLoop.thisTrialN'
p70
I3
sS'ColorLoop.thisRepN'
p71
I0
sg41
Vgreen
p72
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p73
g24
(g52
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp74
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p75
I3
sa(dp76
g28
I3
sS'ColorLoop.thisTrialN'
p77
I4
sS'ColorLoop.thisRepN'
p78
I0
sg41
Vgray
p79
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p80
g24
(g52
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp81
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p82
I4
sa(dp83
g28
I3
sS'ColorLoop.thisTrialN'
p84
I5
sS'ColorLoop.thisRepN'
p85
I0
sg41
Vcyan
p86
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p87
g24
(g52
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp88
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p89
I5
sa(dp90
g28
I3
sS'ColorLoop.thisTrialN'
p91
I6
sS'ColorLoop.thisRepN'
p92
I0
sg41
Vmagenta
p93
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p94
g24
(g52
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp95
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p96
I6
sa(dp97
g28
I3
sS'ColorLoop.thisTrialN'
p98
I7
sS'ColorLoop.thisRepN'
p99
I0
sg41
Vblue
p100
sg21
g22
sg31
g32
sg23
g27
sS'ColorLoop.thisIndex'
p101
g24
(g52
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp102
sg19
g11
sg29
g30
sg20
Vm
sS'ColorLoop.thisN'
p103
I7
sa(dp104
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p105
I0
sg42
Vsquare
p106
sg19
g11
sS'ShapeLoop.thisIndex'
p107
g24
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp108
sS'ShapeLoop.thisRepN'
p109
I0
sS'ShapeLoop.thisTrialN'
p110
I0
sg29
g30
sg31
g32
sa(dp111
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p112
I1
sg42
Vcross
p113
sg19
g11
sS'ShapeLoop.thisIndex'
p114
g24
(g52
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp115
sS'ShapeLoop.thisRepN'
p116
I0
sS'ShapeLoop.thisTrialN'
p117
I1
sg29
g30
sg31
g32
sa(dp118
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p119
I2
sg42
Vdiamond
p120
sg19
g11
sS'ShapeLoop.thisIndex'
p121
g24
(g52
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp122
sS'ShapeLoop.thisRepN'
p123
I0
sS'ShapeLoop.thisTrialN'
p124
I2
sg29
g30
sg31
g32
sa(dp125
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p126
I3
sg42
Vcircle
p127
sg19
g11
sS'ShapeLoop.thisIndex'
p128
g24
(g52
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp129
sS'ShapeLoop.thisRepN'
p130
I0
sS'ShapeLoop.thisTrialN'
p131
I3
sg29
g30
sg31
g32
sa(dp132
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p133
I4
sg42
Vhexagon
p134
sg19
g11
sS'ShapeLoop.thisIndex'
p135
g24
(g52
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp136
sS'ShapeLoop.thisRepN'
p137
I0
sS'ShapeLoop.thisTrialN'
p138
I4
sg29
g30
sg31
g32
sa(dp139
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p140
I5
sg42
VinvertedTriangle
p141
sg19
g11
sS'ShapeLoop.thisIndex'
p142
g24
(g52
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp143
sS'ShapeLoop.thisRepN'
p144
I0
sS'ShapeLoop.thisTrialN'
p145
I5
sg29
g30
sg31
g32
sa(dp146
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p147
I6
sg42
Vline
p148
sg19
g11
sS'ShapeLoop.thisIndex'
p149
g24
(g52
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp150
sS'ShapeLoop.thisRepN'
p151
I0
sS'ShapeLoop.thisTrialN'
p152
I6
sg29
g30
sg31
g32
sa(dp153
g28
I3
sg20
Vm
sg21
g22
sg23
g27
sS'ShapeLoop.thisN'
p154
I7
sg42
Vtriangle
p155
sg19
g11
sS'ShapeLoop.thisIndex'
p156
g24
(g52
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp157
sS'ShapeLoop.thisRepN'
p158
I0
sS'ShapeLoop.thisTrialN'
p159
I7
sg29
g30
sg31
g32
sa(dp160
g28
I3
sg43
VGo
p161
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p162
I0
sg23
g27
sS'RewardAmountLoop.thisIndex'
p163
g24
(g52
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp164
sS'RewardAmountLoop.thisN'
p165
I0
sg44
I1
sS'RewardAmountLoop.thisRepN'
p166
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp167
g28
I3
sg43
VStop
p168
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p169
I1
sg23
g27
sS'RewardAmountLoop.thisIndex'
p170
g24
(g52
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp171
sS'RewardAmountLoop.thisN'
p172
I1
sg44
F0.5
sS'RewardAmountLoop.thisRepN'
p173
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp174
g28
I3
sg43
g161
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p175
I2
sg23
g27
sS'RewardAmountLoop.thisIndex'
p176
g24
(g52
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp177
sS'RewardAmountLoop.thisN'
p178
I2
sg44
I2
sS'RewardAmountLoop.thisRepN'
p179
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp180
g28
I3
sg43
g168
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p181
I3
sg23
g27
sS'RewardAmountLoop.thisIndex'
p182
g24
(g52
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp183
sS'RewardAmountLoop.thisN'
p184
I3
sg44
I4
sS'RewardAmountLoop.thisRepN'
p185
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp186
g28
I3
sg43
g168
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p187
I4
sg23
g27
sS'RewardAmountLoop.thisIndex'
p188
g24
(g52
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp189
sS'RewardAmountLoop.thisN'
p190
I4
sg44
I2
sS'RewardAmountLoop.thisRepN'
p191
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp192
g28
I3
sg43
g161
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p193
I5
sg23
g27
sS'RewardAmountLoop.thisIndex'
p194
g24
(g52
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp195
sS'RewardAmountLoop.thisN'
p196
I5
sg44
I4
sS'RewardAmountLoop.thisRepN'
p197
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp198
g28
I3
sg43
g161
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p199
I6
sg23
g27
sS'RewardAmountLoop.thisIndex'
p200
g24
(g52
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp201
sS'RewardAmountLoop.thisN'
p202
I6
sg44
F0.5
sS'RewardAmountLoop.thisRepN'
p203
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp204
g28
I3
sg43
g168
sg19
g11
sg20
Vm
sS'RewardAmountLoop.thisTrialN'
p205
I7
sg23
g27
sS'RewardAmountLoop.thisIndex'
p206
g24
(g52
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp207
sS'RewardAmountLoop.thisN'
p208
I7
sg44
I1
sS'RewardAmountLoop.thisRepN'
p209
I0
sg29
g30
sg31
g32
sg21
g22
sa(dp210
g28
I3
sg20
Vm
sg15
F1.0651590824127197
sg21
g22
sg23
g27
sg19
g11
sg14
S'space'
p211
sg29
g30
sg31
g32
sasS'loops'
p212
(lp213
g1
(cpsychopy.data
TrialHandler
p214
g3
NtRp215
(dp216
S'origin'
p217
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.81.03), Wed Mar  4 12:07:25 2015\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'LearningTask'  # from the Builder filename that created this script\u000aexpInfo = {'participant':'', 'gender (m/f)':'', 'age':'', 'session':03}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + u'data' + os.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.WARNING)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "instrPractice"\u000ainstrPracticeClock = core.Clock()\u000ainstruct1 = visual.TextStim(win=win, ori=0, name='instruct1',\u000a    text='A shape stimulus will appear on every trial. \u005cn\u005cnIf it appears in the upper right quadrant, PRESS Y\u005cn\u005cnIf it appears in the lower right quadrant, PRESS H\u005cn\u005cnIf it appears in the lower left quadrant, PRESS G\u005cn\u005cnIf it appears in the upper left quadrant, PRESS T\u005cn\u005cnPress any key when you are ready to proceed. ',    font='Arial',\u000a    pos=[0, 0], height=0.07, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a# set up handler to look after randomisation of conditions etc\u000aColorLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions('Color.xlsx'),\u000a    seed=None, name='ColorLoop')\u000athisExp.addLoop(ColorLoop)  # add the loop to the experiment\u000athisColorLoop = ColorLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisColorLoop.rgb)\u000aif thisColorLoop != None:\u000a    for paramName in thisColorLoop.keys():\u000a        exec(paramName + '= thisColorLoop.' + paramName)\u000a\u000afor thisColorLoop in ColorLoop:\u000a    currentLoop = ColorLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisColorLoop.rgb)\u000a    if thisColorLoop != None:\u000a        for paramName in thisColorLoop.keys():\u000a            exec(paramName + '= thisColorLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'ColorLoop'\u000a\u000a# get names of stimulus parameters\u000aif ColorLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = ColorLoop.trialList[0].keys()\u000a# save data for this loop\u000aColorLoop.saveAsExcel(filename + '.xlsx', sheetName='ColorLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a# set up handler to look after randomisation of conditions etc\u000aShapeLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'Shape.xlsx'),\u000a    seed=None, name='ShapeLoop')\u000athisExp.addLoop(ShapeLoop)  # add the loop to the experiment\u000athisShapeLoop = ShapeLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisShapeLoop.rgb)\u000aif thisShapeLoop != None:\u000a    for paramName in thisShapeLoop.keys():\u000a        exec(paramName + '= thisShapeLoop.' + paramName)\u000a\u000afor thisShapeLoop in ShapeLoop:\u000a    currentLoop = ShapeLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisShapeLoop.rgb)\u000a    if thisShapeLoop != None:\u000a        for paramName in thisShapeLoop.keys():\u000a            exec(paramName + '= thisShapeLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'ShapeLoop'\u000a\u000a# get names of stimulus parameters\u000aif ShapeLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = ShapeLoop.trialList[0].keys()\u000a# save data for this loop\u000aShapeLoop.saveAsExcel(filename + '.xlsx', sheetName='ShapeLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a# set up handler to look after randomisation of conditions etc\u000aRewardAmountLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'StopOrGoAndAmount.xlsx'),\u000a    seed=None, name='RewardAmountLoop')\u000athisExp.addLoop(RewardAmountLoop)  # add the loop to the experiment\u000athisRewardAmountLoop = RewardAmountLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisRewardAmountLoop.rgb)\u000aif thisRewardAmountLoop != None:\u000a    for paramName in thisRewardAmountLoop.keys():\u000a        exec(paramName + '= thisRewardAmountLoop.' + paramName)\u000a\u000afor thisRewardAmountLoop in RewardAmountLoop:\u000a    currentLoop = RewardAmountLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisRewardAmountLoop.rgb)\u000a    if thisRewardAmountLoop != None:\u000a        for paramName in thisRewardAmountLoop.keys():\u000a            exec(paramName + '= thisRewardAmountLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'RewardAmountLoop'\u000a\u000a# get names of stimulus parameters\u000aif RewardAmountLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = RewardAmountLoop.trialList[0].keys()\u000a# save data for this loop\u000aRewardAmountLoop.saveAsExcel(filename + '.xlsx', sheetName='RewardAmountLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a#------Prepare to start Routine "instrPractice"-------\u000at = 0\u000ainstrPracticeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aok1 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000aok1.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstrPracticeComponents = []\u000ainstrPracticeComponents.append(instruct1)\u000ainstrPracticeComponents.append(ok1)\u000afor thisComponent in instrPracticeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instrPractice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instrPracticeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instruct1* updates\u000a    if t >= 0.0 and instruct1.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instruct1.tStart = t  # underestimates by a little under one frame\u000a        instruct1.frameNStart = frameN  # exact frame index\u000a        instruct1.setAutoDraw(True)\u000a    \u000a    # *ok1* updates\u000a    if t >= 0.0 and ok1.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        ok1.tStart = t  # underestimates by a little under one frame\u000a        ok1.frameNStart = frameN  # exact frame index\u000a        ok1.status = STARTED\u000a        # keyboard checking is just starting\u000a        ok1.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if ok1.status == STARTED:\u000a        theseKeys = event.getKeys()\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            ok1.keys = theseKeys[-1]  # just the last key pressed\u000a            ok1.rt = ok1.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instrPracticeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instrPractice"-------\u000afor thisComponent in instrPracticeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif ok1.keys in ['', [], None]:  # No response was made\u000a   ok1.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('ok1.keys',ok1.keys)\u000aif ok1.keys != None:  # we had a response\u000a    thisExp.addData('ok1.rt', ok1.rt)\u000athisExp.nextEntry()\u000awin.close()\u000acore.quit()\u000a
p218
sS'thisTrial'
p219
(lp220
sS'_exp'
p221
I4619550864
sg10
S'ColorLoop'
p222
sg6
S'/Users/patrickbissett/OneDrive/Poldrack/TrainedInhibition/PsychoPy/ColorLoop.py'
p223
sS'thisRepN'
p224
I1
sg16
I01
sg17
g18
sS'data'
p225
g1
(cpsychopy.data
DataHandler
p226
c__builtin__
dict
p227
(dp228
S'ran'
p229
cnumpy.ma.core
_mareconstruct
p230
(cnumpy.ma.core
MaskedArray
p231
cnumpy
ndarray
p232
(I0
tp233
S'b'
tRp234
(I1
(I8
I1
tg25
(S'f4'
I0
I1
tRp235
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p236
g230
(g231
g232
g233
S'b'
tRp237
(I1
(I8
I1
tg235
I00
S'\x00\x00\x00@\x00\x00\x80?\x00\x00\x00\x00\x00\x00\xc0@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xe0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp238
(dp239
S'isNumeric'
p240
(dp241
g229
I01
sg236
I01
ssS'trials'
p242
g215
sS'dataTypes'
p243
(lp244
g229
ag236
asS'dataShape'
p245
(lp246
I8
aI1
asbsS'method'
p247
S'random'
p248
sS'sequenceIndices'
p249
cnumpy.core.multiarray
_reconstruct
p250
(g232
(I0
tS'b'
tRp251
(I1
(I8
I1
tg52
I01
S'\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00'
tbsS'finished'
p252
I01
sS'nReps'
p253
I1
sS'nRemaining'
p254
I-1
sS'trialList'
p255
(lp256
g1
(cpsychopy.data
TrialType
p257
g227
(dp258
g41
g65
stRp259
ag1
(g257
g227
(dp260
g41
g58
stRp261
ag1
(g257
g227
(dp262
g41
g50
stRp263
ag1
(g257
g227
(dp264
g41
g93
stRp265
ag1
(g257
g227
(dp266
g41
g72
stRp267
ag1
(g257
g227
(dp268
g41
g79
stRp269
ag1
(g257
g227
(dp270
g41
g86
stRp271
ag1
(g257
g227
(dp272
g41
g100
stRp273
asS'seed'
p274
NsS'thisIndex'
p275
g102
sS'thisN'
p276
I8
sS'thisTrialN'
p277
I0
sS'nTotal'
p278
I8
sS'_warnUseOfNext'
p279
I01
sbag1
(g214
g3
NtRp280
(dp281
g217
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.81.03), Wed Mar  4 12:07:25 2015\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'LearningTask'  # from the Builder filename that created this script\u000aexpInfo = {'participant':'', 'gender (m/f)':'', 'age':'', 'session':03}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + u'data' + os.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.WARNING)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "instrPractice"\u000ainstrPracticeClock = core.Clock()\u000ainstruct1 = visual.TextStim(win=win, ori=0, name='instruct1',\u000a    text='A shape stimulus will appear on every trial. \u005cn\u005cnIf it appears in the upper right quadrant, PRESS Y\u005cn\u005cnIf it appears in the lower right quadrant, PRESS H\u005cn\u005cnIf it appears in the lower left quadrant, PRESS G\u005cn\u005cnIf it appears in the upper left quadrant, PRESS T\u005cn\u005cnPress any key when you are ready to proceed. ',    font='Arial',\u000a    pos=[0, 0], height=0.07, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a# set up handler to look after randomisation of conditions etc\u000aColorLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions('Color.xlsx'),\u000a    seed=None, name='ColorLoop')\u000athisExp.addLoop(ColorLoop)  # add the loop to the experiment\u000athisColorLoop = ColorLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisColorLoop.rgb)\u000aif thisColorLoop != None:\u000a    for paramName in thisColorLoop.keys():\u000a        exec(paramName + '= thisColorLoop.' + paramName)\u000a\u000afor thisColorLoop in ColorLoop:\u000a    currentLoop = ColorLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisColorLoop.rgb)\u000a    if thisColorLoop != None:\u000a        for paramName in thisColorLoop.keys():\u000a            exec(paramName + '= thisColorLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'ColorLoop'\u000a\u000a# get names of stimulus parameters\u000aif ColorLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = ColorLoop.trialList[0].keys()\u000a# save data for this loop\u000aColorLoop.saveAsExcel(filename + '.xlsx', sheetName='ColorLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a# set up handler to look after randomisation of conditions etc\u000aShapeLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'Shape.xlsx'),\u000a    seed=None, name='ShapeLoop')\u000athisExp.addLoop(ShapeLoop)  # add the loop to the experiment\u000athisShapeLoop = ShapeLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisShapeLoop.rgb)\u000aif thisShapeLoop != None:\u000a    for paramName in thisShapeLoop.keys():\u000a        exec(paramName + '= thisShapeLoop.' + paramName)\u000a\u000afor thisShapeLoop in ShapeLoop:\u000a    currentLoop = ShapeLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisShapeLoop.rgb)\u000a    if thisShapeLoop != None:\u000a        for paramName in thisShapeLoop.keys():\u000a            exec(paramName + '= thisShapeLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'ShapeLoop'\u000a\u000a# get names of stimulus parameters\u000aif ShapeLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = ShapeLoop.trialList[0].keys()\u000a# save data for this loop\u000aShapeLoop.saveAsExcel(filename + '.xlsx', sheetName='ShapeLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a# set up handler to look after randomisation of conditions etc\u000aRewardAmountLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'StopOrGoAndAmount.xlsx'),\u000a    seed=None, name='RewardAmountLoop')\u000athisExp.addLoop(RewardAmountLoop)  # add the loop to the experiment\u000athisRewardAmountLoop = RewardAmountLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisRewardAmountLoop.rgb)\u000aif thisRewardAmountLoop != None:\u000a    for paramName in thisRewardAmountLoop.keys():\u000a        exec(paramName + '= thisRewardAmountLoop.' + paramName)\u000a\u000afor thisRewardAmountLoop in RewardAmountLoop:\u000a    currentLoop = RewardAmountLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisRewardAmountLoop.rgb)\u000a    if thisRewardAmountLoop != None:\u000a        for paramName in thisRewardAmountLoop.keys():\u000a            exec(paramName + '= thisRewardAmountLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'RewardAmountLoop'\u000a\u000a# get names of stimulus parameters\u000aif RewardAmountLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = RewardAmountLoop.trialList[0].keys()\u000a# save data for this loop\u000aRewardAmountLoop.saveAsExcel(filename + '.xlsx', sheetName='RewardAmountLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a#------Prepare to start Routine "instrPractice"-------\u000at = 0\u000ainstrPracticeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aok1 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000aok1.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstrPracticeComponents = []\u000ainstrPracticeComponents.append(instruct1)\u000ainstrPracticeComponents.append(ok1)\u000afor thisComponent in instrPracticeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instrPractice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instrPracticeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instruct1* updates\u000a    if t >= 0.0 and instruct1.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instruct1.tStart = t  # underestimates by a little under one frame\u000a        instruct1.frameNStart = frameN  # exact frame index\u000a        instruct1.setAutoDraw(True)\u000a    \u000a    # *ok1* updates\u000a    if t >= 0.0 and ok1.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        ok1.tStart = t  # underestimates by a little under one frame\u000a        ok1.frameNStart = frameN  # exact frame index\u000a        ok1.status = STARTED\u000a        # keyboard checking is just starting\u000a        ok1.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if ok1.status == STARTED:\u000a        theseKeys = event.getKeys()\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            ok1.keys = theseKeys[-1]  # just the last key pressed\u000a            ok1.rt = ok1.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instrPracticeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instrPractice"-------\u000afor thisComponent in instrPracticeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif ok1.keys in ['', [], None]:  # No response was made\u000a   ok1.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('ok1.keys',ok1.keys)\u000aif ok1.keys != None:  # we had a response\u000a    thisExp.addData('ok1.rt', ok1.rt)\u000athisExp.nextEntry()\u000awin.close()\u000acore.quit()\u000a
p282
sg219
(lp283
sg221
I4619550864
sg10
S'ShapeLoop'
p284
sg6
g223
sg224
I1
sg16
I01
sg17
g18
sg225
g1
(g226
g227
(dp285
g229
g230
(g231
g232
g233
S'b'
tRp286
(I1
(I8
I1
tg235
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg236
g230
(g231
g232
g233
S'b'
tRp287
(I1
(I8
I1
tg235
I00
S'\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\xc0@\x00\x00\xa0@\x00\x00\x80@\x00\x00\x00@\x00\x00\x80?\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp288
(dp289
g240
(dp290
g229
I01
sg236
I01
ssg242
g280
sg243
(lp291
g229
ag236
asg245
(lp292
I8
aI1
asbsg247
g248
sg249
g250
(g232
(I0
tS'b'
tRp293
(I1
(I8
I1
tg52
I01
S'\x01\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg252
I01
sg253
I1
sg254
I-1
sg255
(lp294
g1
(g257
g227
(dp295
g42
g155
stRp296
ag1
(g257
g227
(dp297
g42
g106
stRp298
ag1
(g257
g227
(dp299
g42
g148
stRp300
ag1
(g257
g227
(dp301
g42
g141
stRp302
ag1
(g257
g227
(dp303
g42
g134
stRp304
ag1
(g257
g227
(dp305
g42
g120
stRp306
ag1
(g257
g227
(dp307
g42
g113
stRp308
ag1
(g257
g227
(dp309
g42
g127
stRp310
asg274
Nsg275
g157
sg276
I8
sg277
I0
sg278
I8
sg279
I01
sbag1
(g214
g3
NtRp311
(dp312
g217
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.81.03), Wed Mar  4 12:07:25 2015\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'LearningTask'  # from the Builder filename that created this script\u000aexpInfo = {'participant':'', 'gender (m/f)':'', 'age':'', 'session':03}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + u'data' + os.sep + '%s_%s' %(expInfo['participant'], expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.WARNING)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "StimSetup"\u000aStimSetupClock = core.Clock()\u000a\u000a# Initialize components for Routine "instrPractice"\u000ainstrPracticeClock = core.Clock()\u000ainstruct1 = visual.TextStim(win=win, ori=0, name='instruct1',\u000a    text='A shape stimulus will appear on every trial. \u005cn\u005cnIf it appears in the upper right quadrant, PRESS Y\u005cn\u005cnIf it appears in the lower right quadrant, PRESS H\u005cn\u005cnIf it appears in the lower left quadrant, PRESS G\u005cn\u005cnIf it appears in the upper left quadrant, PRESS T\u005cn\u005cnPress any key when you are ready to proceed. ',    font='Arial',\u000a    pos=[0, 0], height=0.07, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a# set up handler to look after randomisation of conditions etc\u000aColorLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions('Color.xlsx'),\u000a    seed=None, name='ColorLoop')\u000athisExp.addLoop(ColorLoop)  # add the loop to the experiment\u000athisColorLoop = ColorLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisColorLoop.rgb)\u000aif thisColorLoop != None:\u000a    for paramName in thisColorLoop.keys():\u000a        exec(paramName + '= thisColorLoop.' + paramName)\u000a\u000afor thisColorLoop in ColorLoop:\u000a    currentLoop = ColorLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisColorLoop.rgb)\u000a    if thisColorLoop != None:\u000a        for paramName in thisColorLoop.keys():\u000a            exec(paramName + '= thisColorLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'ColorLoop'\u000a\u000a# get names of stimulus parameters\u000aif ColorLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = ColorLoop.trialList[0].keys()\u000a# save data for this loop\u000aColorLoop.saveAsExcel(filename + '.xlsx', sheetName='ColorLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a# set up handler to look after randomisation of conditions etc\u000aShapeLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'Shape.xlsx'),\u000a    seed=None, name='ShapeLoop')\u000athisExp.addLoop(ShapeLoop)  # add the loop to the experiment\u000athisShapeLoop = ShapeLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisShapeLoop.rgb)\u000aif thisShapeLoop != None:\u000a    for paramName in thisShapeLoop.keys():\u000a        exec(paramName + '= thisShapeLoop.' + paramName)\u000a\u000afor thisShapeLoop in ShapeLoop:\u000a    currentLoop = ShapeLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisShapeLoop.rgb)\u000a    if thisShapeLoop != None:\u000a        for paramName in thisShapeLoop.keys():\u000a            exec(paramName + '= thisShapeLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'ShapeLoop'\u000a\u000a# get names of stimulus parameters\u000aif ShapeLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = ShapeLoop.trialList[0].keys()\u000a# save data for this loop\u000aShapeLoop.saveAsExcel(filename + '.xlsx', sheetName='ShapeLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a# set up handler to look after randomisation of conditions etc\u000aRewardAmountLoop = data.TrialHandler(nReps=1, method='random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'StopOrGoAndAmount.xlsx'),\u000a    seed=None, name='RewardAmountLoop')\u000athisExp.addLoop(RewardAmountLoop)  # add the loop to the experiment\u000athisRewardAmountLoop = RewardAmountLoop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisRewardAmountLoop.rgb)\u000aif thisRewardAmountLoop != None:\u000a    for paramName in thisRewardAmountLoop.keys():\u000a        exec(paramName + '= thisRewardAmountLoop.' + paramName)\u000a\u000afor thisRewardAmountLoop in RewardAmountLoop:\u000a    currentLoop = RewardAmountLoop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisRewardAmountLoop.rgb)\u000a    if thisRewardAmountLoop != None:\u000a        for paramName in thisRewardAmountLoop.keys():\u000a            exec(paramName + '= thisRewardAmountLoop.' + paramName)\u000a    \u000a    #------Prepare to start Routine "StimSetup"-------\u000a    t = 0\u000a    StimSetupClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    StimSetupComponents = []\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "StimSetup"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = StimSetupClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in StimSetupComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "StimSetup"-------\u000a    for thisComponent in StimSetupComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'RewardAmountLoop'\u000a\u000a# get names of stimulus parameters\u000aif RewardAmountLoop.trialList in ([], [None], None):  params = []\u000aelse:  params = RewardAmountLoop.trialList[0].keys()\u000a# save data for this loop\u000aRewardAmountLoop.saveAsExcel(filename + '.xlsx', sheetName='RewardAmountLoop',\u000a    stimOut=params,\u000a    dataOut=['n','all_mean','all_std', 'all_raw'])\u000a\u000a#------Prepare to start Routine "instrPractice"-------\u000at = 0\u000ainstrPracticeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aok1 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000aok1.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstrPracticeComponents = []\u000ainstrPracticeComponents.append(instruct1)\u000ainstrPracticeComponents.append(ok1)\u000afor thisComponent in instrPracticeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instrPractice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instrPracticeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instruct1* updates\u000a    if t >= 0.0 and instruct1.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instruct1.tStart = t  # underestimates by a little under one frame\u000a        instruct1.frameNStart = frameN  # exact frame index\u000a        instruct1.setAutoDraw(True)\u000a    \u000a    # *ok1* updates\u000a    if t >= 0.0 and ok1.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        ok1.tStart = t  # underestimates by a little under one frame\u000a        ok1.frameNStart = frameN  # exact frame index\u000a        ok1.status = STARTED\u000a        # keyboard checking is just starting\u000a        ok1.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if ok1.status == STARTED:\u000a        theseKeys = event.getKeys()\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            ok1.keys = theseKeys[-1]  # just the last key pressed\u000a            ok1.rt = ok1.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instrPracticeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instrPractice"-------\u000afor thisComponent in instrPracticeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif ok1.keys in ['', [], None]:  # No response was made\u000a   ok1.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('ok1.keys',ok1.keys)\u000aif ok1.keys != None:  # we had a response\u000a    thisExp.addData('ok1.rt', ok1.rt)\u000athisExp.nextEntry()\u000awin.close()\u000acore.quit()\u000a
p313
sg219
(lp314
sg221
I4619550864
sg10
S'RewardAmountLoop'
p315
sg6
g223
sg224
I1
sg16
I01
sg17
g18
sg225
g1
(g226
g227
(dp316
g229
g230
(g231
g232
g233
S'b'
tRp317
(I1
(I8
I1
tg235
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg236
g230
(g231
g232
g233
S'b'
tRp318
(I1
(I8
I1
tg235
I00
S'\x00\x00\x80?\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x00@\x00\x00@@\x00\x00\xa0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp319
(dp320
g240
(dp321
g229
I01
sg236
I01
ssg242
g311
sg243
(lp322
g229
ag236
asg245
(lp323
I8
aI1
asbsg247
g248
sg249
g250
(g232
(I0
tS'b'
tRp324
(I1
(I8
I1
tg52
I01
S'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00'
tbsg252
I01
sg253
I1
sg254
I-1
sg255
(lp325
g1
(g257
g227
(dp326
g43
g168
sg44
F0.5
stRp327
ag1
(g257
g227
(dp328
g43
g161
sg44
F0.5
stRp329
ag1
(g257
g227
(dp330
g43
g168
sg44
I1
stRp331
ag1
(g257
g227
(dp332
g43
g161
sg44
I1
stRp333
ag1
(g257
g227
(dp334
g43
g168
sg44
I2
stRp335
ag1
(g257
g227
(dp336
g43
g161
sg44
I2
stRp337
ag1
(g257
g227
(dp338
g43
g168
sg44
I4
stRp339
ag1
(g257
g227
(dp340
g43
g161
sg44
I4
stRp341
asg274
Nsg275
g207
sg276
I8
sg277
I0
sg278
I8
sg279
I01
sbasS'savePickle'
p342
I00
sb.